Contributing to TorchOpt
========================

Before contributing to TorchOpt, please follow the instructions below to setup.

1. Fork TorchOpt (`fork <https://github.com/metaopt/TorchOpt/fork>`_) on GitHub and clone the repository.

.. code-block:: bash

    git clone git@github.com:<your username>/TorchOpt.git  # use the SSH protocol
    cd TorchOpt

    git remote add upstream git@github.com:metaopt/TorchOpt.git

2. Setup a development environment via `conda <https://github.com/conda/conda>`_:

.. code-block:: bash

    # You may need `CONDA_OVERRIDE_CUDA` if conda fails to detect the NVIDIA driver (e.g. in docker or WSL2)
    CONDA_OVERRIDE_CUDA=11.7 conda env create --file conda-recipe.yaml

    conda activate torchopt

3. Setup the `pre-commit <https://pre-commit.com>`_ hooks:

.. code-block:: bash

    pre-commit install --install-hooks

Then you are ready to rock. Thanks for contributing to TorchOpt!


Install Develop Version
-----------------------

To install TorchOpt in an "editable" mode, run:

.. code-block:: bash

    pip3 install --no-build-isolation --editable .

in the main directory. This installation is removable by:

.. code-block:: bash

    pip3 uninstall torchopt


Lint Check
----------

We use several tools to secure code quality, including:

    * PEP8 code style: ``black``, ``isort``, ``pylint``, ``flake8``
    * Type hint check: ``mypy``
    * C++ Google-style: ``cpplint``, ``clang-format``
    * License: ``addlicense``
    * Documentation: ``pydocstyle``, ``doc8``

To make things easier, we create several shortcuts as follows.

To automatically format the code, run:

.. code-block:: bash

    make format

To check if everything conforms to the specification, run:

.. code-block:: bash

    make lint


Test Locally
------------

This command will run automatic tests in the main directory:

.. code-block:: bash

    $ make test


Build Wheels
------------

To build compatible **manylinux2014** (:pep:`599`) wheels for distribution, you can use |cibuildwheel|_. You will need to install |docker|_ first. Then run the following command:

.. code-block:: bash

    pip3 install --upgrade cibuildwheel

    export PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/cu116"  # extra index URL for `torch`
    export CUDA_VERSION="11.6"                                           # version of `nvcc` for compilation
    python3 -m cibuildwheel --platform=linux --output-dir=wheelhouse --config-file=pyproject.toml

It will installs the CUDA compiler with ``CUDA_VERSION`` in the build container. Then build wheel binaries for all supported CPython versions. The outputs will be placed in the ``wheelhouse`` directory.

.. |cibuildwheel| replace:: ``cibuildwheel``
.. _cibuildwheel: https://github.com/pypa/cibuildwheel

.. |docker| replace:: ``docker``
.. _docker: https://www.docker.com

Documentation
-------------

Documentations are written under the :gitcode:`docs/source` directory as ReStructuredText (``.rst``) files. ``index.rst`` is the main page. A Tutorial on ReStructuredText can be found `here <https://pythonhosted.org/an_example_pypi_project/sphinx.html>`_.

API References are automatically generated by `Sphinx <http://www.sphinx-doc.org/en/stable/>`_ according to the outlines under directory :gitcode:`docs/source/api` and should be modified when any code changes.

To compile documentation into webpage, run

.. code-block:: bash

    $ make docs

The generated webpage locates under directory ``docs/build`` and will open the browser after building documentation.

Detailed documentation is hosted online at https://torchopt.readthedocs.io.
